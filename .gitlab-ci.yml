# Dependencies are managed in the Dockerfile in the inkscape-ci-docker
# Git repository. Change them there, wait a bit, and then we'll use
# the new ones here in these builds.
image: registry.gitlab.com/inkscape/inkscape-ci-docker/master

variables:
  GIT_DEPTH: "10"
  GIT_SUBMODULE_STRATEGY: recursive


# Building inkscape
inkscape:linux:
  stage: build
  except:
    - schedules
  cache:
    key: "cache-linux"
    paths:
      - ccache/
  before_script:
    # CCache Config
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  script:
    - mkdir -p build/conf
    - ln -s . share/inkscape
    - cd build
    - cmake .. -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX:PATH=$PWD/install_dir/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - make -j3 install
    - make -j3 tests
    - cpack -G DEB
    - cd ..
  artifacts:
    expire_in: 1 year
    paths:
      - build/

appimage:linux:
  stage: build
  except:
    - schedules
  cache:
    key: "cache-appimage"
    paths:
      - ccache/
  before_script:
    # CCache Config
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  script:
    - apt-get update -yqq && apt-get install -y software-properties-common libaspell-dev libgtkspell-dev libgtkspell3-3-dev libmagick++-dev # FIXME: Move to Dockerfile?
    - add-apt-repository -y ppa:bryce/pango1.0 # backported pango (from 18.10) for variable font support
    - apt-get update -yqq && apt-get install -y wget libpango1.0-0 libpango1.0-dev
    - mkdir -p build && cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DENABLE_BINRELOC=ON -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - make -j$(nproc)
    - make DESTDIR=appdir -j$(nproc) install ; find appdir/
    - cp ../packaging/appimage/AppRun appdir/AppRun ; chmod +x appdir/AppRun
    - ( cd appdir/usr/lib/ ; ln -s ../* . ) # FIXME: Why is this needed?
    - ( cd appdir/ ; ln -s usr/* . ) # FIXME: Why is this needed?
    - cp ./appdir/usr/share/inkscape/icons/hicolor/scalable/apps/inkscape.svg ./appdir/
    - sed -i -e 's|^Icon=.*|Icon=inkscape|g' ./appdir/usr/share/applications/inkscape.desktop # FIXME
    - cd appdir/
    # Bundle all of glibc; this should eventually be done by linuxdeployqt
    - apt-get download libc6
    - find *.deb -exec ar p {} data.tar.xz \; | tar xJ
    - rm *deb
    # Make absolutely sure it will not load stuff from /lib or /usr
    - sed -i -e 's|/usr|/xxx|g' lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
    - sed -i -e 's|/usr/lib|/ooo/ooo|g' lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
    # Bundle Gdk pixbuf loaders without which the bundled Gtk does not work; this should eventually be done by linuxdeployqt
    - apt-get download librsvg2-common libgdk-pixbuf2.0-0
    - find *.deb -exec ar p {} data.tar.xz \; | tar xJ
    - rm *deb
    - cp /usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/* usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/
    - cp /usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders.cache usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/
    # Bundle Python
    - apt-get download libpython2.7-stdlib python2.7 libpython2.7-minimal python-lxml
    - find *.deb -exec ar p {} data.tar.xz \; | tar xJ
    - rm *deb
    - cd -
    - wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
    - chmod a+x linuxdeployqt-continuous-x86_64.AppImage
    - |
      ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract-and-run appdir/usr/share/applications/*.desktop \
      -appimage -unsupported-bundle-everything -executable=appdir/usr/bin/inkview \
      -executable=appdir/usr/lib/inkscape/libinkscape_base.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-xpm.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-xbm.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-tiff.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-tga.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-svg.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-qtif.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-pnm.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-png.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-jpeg.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-ico.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-icns.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-gif.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-bmp.so \
      -executable=appdir/usr/lib/x86_64-linux-gnu/gdk-pixbuf-*/*/loaders/libpixbufloader-ani.so \
      -executable=appdir/usr/bin/python2.7
  artifacts:
    expire_in: 1 year
    paths:
      - build/Inkscape*.AppImage*

inkscape:mac:
  stage: build
  tags:
    - mac
  only:
    - branches@inkscape/inkscape
  except:
    - schedules
  cache:
    key: "cache-mac"
    paths:
      - ccache/
  before_script:
    - brew update
    - brew upgrade
    # Tools
    - brew install cmake intltool libtool pkg-config ccache
    # Libraries
    - brew install bdw-gc boost gdl gettext gsl gtkmm3 gtkspell3 imagemagick@6 jemalloc libcdr libvisio libyaml libwpg pango popt poppler potrace libsoup
    # Testing tools
    # TODO
    # Cleanup
    - brew cleanup
    # CCache Config
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_PREFIX_PATH="/usr/local/opt/gettext;/usr/local/opt/imagemagick@6/;/usr/local/opt/icu4c/" -DWITH_OPENMP=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug
    - make -j1
    - cd ..
  artifacts:
    expire_in: 1 year
    paths:
      - build/
  allow_failure: true


codequality:
  stage: build
  except:
    - schedules
  script:
    - git fetch https://gitlab.com/inkscape/inkscape.git
    - echo "Your commit does not comply exactly with the clang-format style checker.\nPlease review the following diff or apply it with\n \$ git apply <<EOF"
    - git diff FETCH_HEAD -U0 --no-color | clang-format-diff-6.0 -p1 -style file | tee clang_format_diff
    - echo "EOF"
    - if [[ -s clang_format_diff ]]; then false; fi
  allow_failure: true

codeprotect:
  stage: build
  except:
    - schedules
  script:
    - git fetch https://gitlab.com/inkscape/inkscape.git
    - git diff FETCH_HEAD -U0 --no-color src/2geom/ src/3rdparty/adaptagrams/ src/3rdparty/libdepixelize src/3rdparty/libuemf | tee forbidden
    - if [[ -s forbidden ]]; then echo "This commit modifies files that are in an dependency library. Make sure you update upstream first, *then* force the merge in Inkscape."; false; fi

clangtidy:linux:
  stage: build
  except:
    - schedules
  script:
    - mkdir -p build && cd build
    - cmake .. -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX:PATH=$PWD/install_dir/ -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - run-clang-tidy -fix -header-filter='.*' > /dev/null && git checkout ../src/3rdparty/ ../src/2geom/
    - git diff | tee clang_tidy_diff
    - if [[ -s clang_tidy_diff ]]; then false; fi

source-doc:
  stage: build
  only:
    variables:
      - $SCHEDULED_JOB_NAME == "source-doc"
  script:
    - cd buildtools
    - doxygen Doxyfile
    - doxygen Doxyfile-extensions
    - cd ..
  artifacts:
    paths:
      - doc/doxygen
      - doc/doxygen-extensions

# This job is a static analysis build by clang.
# It takes MORE THAN 3 HOURS, and depending on worker sometimes 4 hours.
# Make sure the timeout of the build is big enough
clang:
  stage: build
  only:
    variables:
      - $SCHEDULED_JOB_NAME == "clang"
  script:
    - apt-get update -yqq && apt-get install -y clang
    - mkdir -p clang-build
    - cd clang-build
    - scan-build cmake .. -DCMAKE_BUILD_TYPE=Debug
    - VERBOSE=1 scan-build -o ../scan make -j2
  artifacts:
    paths:
      - scan/

test:linux:
  stage: test
  except:
    - schedules
  dependencies:
    - inkscape:linux
  script:
    - cd build
    - ctest -V

check-license-headers:
  stage: build
  except:
    - schedules
  script:
    - python buildtools/check_license_headers.py

translations:
  stage: build
  except:
    - schedules
  script:
    # make sure dependencies for inkscape.pot are up-to-date
    - mkdir build && cd build && cmake .. && make inkscape_pot && cd ..
    - cd po/

    # update POTFILES.in
    - grep -v "^#" POTFILES.in > POTFILES.in.1
    - ./generate_POTFILES.sh
    - grep -v "^#" POTFILES.in > POTFILES.in.2

    # update inkscape.pot and sync all .po files
    - intltool-update --pot && mv untitled.pot inkscape.pot
    - ./update_po_files.sh

    # check if POTFILES.in should be updated in the repo (shall we automate this?)
    - 'if [ -n "$(diff POTFILES.in.1 POTFILES.in.2)" ]; then
        git diff POTFILES.in;
        echo "New translatable strings in source files found.";
        echo "Please add the paths to POTFILES.in so they can be translated";
        echo "(or add them to POTFILES.skip to exclude them from translations).";
        exit 1;
      fi'
    - rm POTFILES.in.1 POTFILES.in.2
  artifacts:
    name: "translations"
    paths:
      - po/
    when: always

# uploads the clang scan to user.gitlab.io/inkscape/
pages:
  stage: deploy
  only:
    - schedules
  dependencies:
    - source-doc
    - clang
  script:
    - mkdir -p public/
    - sed "s/%DATE%/$(date '+%B %d, %Y')/" buildtools/ci-index.html > public/index.html
    - if test -e scan; then cp -rv scan/* public/scan-build; fi
    - if test -e doc/doxygen; then cp -rv doc/doxygen/html public/doxygen; fi
    - if test -e doc/doxygen-extensions; then cp -rv doc/doxygen-extensions/html public/doxygen-extensions; fi
  artifacts:
    paths:
      - public
